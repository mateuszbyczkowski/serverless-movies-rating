package com.serverless.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

@DynamoDBTable(tableName = "PLACEHOLDER_MOVIE_TABLE_NAME")
public class Movie {

    // get the table name from env. var. set in serverless.yml
    private static final String MOVIE_TABLE_NAME = System.getenv("MOVIE_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private static final Logger logger = LogManager.getLogger(Movie.class);

    private String id;
    private String name;
    private Float rate;
    private String author;

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "name")
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @DynamoDBAttribute(attributeName = "rate")
    public Float getRate() {
        return this.rate;
    }

    public void setRate(Float rate) {
        this.rate = rate;
    }

    @DynamoDBAttribute(attributeName = "author")
    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public Movie() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(MOVIE_TABLE_NAME))
                .build();
        // get the db adapter
        db_adapter = DynamoDBAdapter.getInstance();
        this.client = db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = db_adapter.createDbMapper(mapperConfig);
    }

    public Movie(AmazonDynamoDB client) {
        db_adapter = DynamoDBAdapter.getInstance();
        this.client = client;
        // create the mapper with config
        this.mapper = new DynamoDBMapper(client);
    }

    public String toString() {
        return String.format("Movie [id=%s, name=%s, rate=$%f]", this.id, this.name, this.rate);
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(MOVIE_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public List<Movie> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Movie> results = this.mapper.scan(Movie.class, scanExp);
        for (Movie p : results) {
            logger.info("Movies - list(): " + p.toString());
        }
        return results;
    }

    public Movie get(String id) throws IOException {
        Movie movie = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Movie> queryExp = new DynamoDBQueryExpression<Movie>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Movie> result = this.mapper.query(Movie.class, queryExp);
        if (result.size() > 0) {
            movie = result.get(0);
            logger.info("Movies - get(): movie - " + movie.toString());
        } else {
            logger.info("Movies - get(): movie - Not Found.");
        }
        return movie;
    }

    public void save(Movie movie) throws IOException {
        logger.info("Movies - save(): " + movie.toString());
        this.mapper.save(movie);
    }

    public Boolean delete(String id) throws IOException {
        Movie movie = null;

        // get movie if exists
        movie = get(id);
        if (movie != null) {
            logger.info("Movies - delete(): " + movie.toString());
            this.mapper.delete(movie);
        } else {
            logger.info("Movies - delete(): movie - does not exist.");
            return false;
        }
        return true;
    }
}
